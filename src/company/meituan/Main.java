package meituan;
/*
围栏
时间限制： 3000MS
内存限制： 1048576KB
题目描述：
小美和小团要搬家,他们要把家具从围栏上搬过去.围栏由n个独立的木桩排成一条直线组成,第i个木桩编号为i.由于他们体力的限制,只能越过高度不高于h的围栏.同时家具又要有宽度限制,只有连续m个木桩都能搬过去才能成功将家具搬过去.现在他们想知道他们能否成功搬家.



输入描述
第一行三个整数n,m和h，含义如上文所述。

第二行n个整数，height1,...,heightn，依次表示每个木桩的高度。

1≤m≤n≤105,0≤h,heighti≤109。

输出描述
输出一个整数，若能成功搬家,输出第一个跨过的木桩的编号,若有多组答案输出最小的。否则,输出整数-1。


样例输入
5 3 2
3 2 1 1 2
样例输出
2

 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class Main {
    public static int isMove(int n, int m, int h, int[] height){
        int start=0,end=0,i=0;
        while(i<n){
            if(height[i]<=h){
                end++;
                i++;
            }else{
                i++;
                start=i;
                end=i;
            }
            if(end-start+1>=m){
                return start+1;
            }
        }
        return -1;

    }
    public static void main(String[] args) throws IOException {
        InputStream in =System.in;
        BufferedReader reader=new BufferedReader(new InputStreamReader(in));
        String tmp=reader.readLine();
        String[] t=tmp.split(" ");
        int n =Integer.parseInt(t[0]);
        int m =Integer.parseInt(t[1]);
        int h =Integer.parseInt(t[2]);
        String array=reader.readLine();
        String [] a=array.split(" ");
        int []height=new int[n];
        for (int i = 0; i <a.length ; i++) {
            height[i]=Integer.parseInt(a[i]);
        }
//        int h=System.in.read()-'0';
//        System.out.println(h);
//        int tmp=System.in.read()-'0';
//        System.out.println(tmp);
//        int n=5, m=3,h=2;
//        int []height={3,2,1,1,2};
        System.out.println(isMove(n,m,h,height));
    }
}
